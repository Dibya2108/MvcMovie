@using Kendo.Mvc.UI
@model ViewModel.MovieViewModel
@{
    Layout = null;
}
<style>

    #errorMsgSpan {
        color: red;
        display: inline-block;
    }
</style>


<h2>@(Model.Id == 0 ? "Create New Movie" : "Edit Movie")</h2>

@*<script>

    var File_onFileSelect = function (e) {
        //console.log(this.element.attr('id'));

        var controlId = this.element.attr('id');

        $.each(e.files, function (index, value) {
            if (value.extension.toUpperCase() != ".JPG" && value.extension.toUpperCase() != ".JPEG" && value.extension.toUpperCase() != ".PNG") {
                e.preventDefault();
                alert('jpg or png image supported');
            } else {

                var fileReader = new FileReader();
                fileReader.onload = function (event) {
                    //console.log(event);
                    var mapImage = event.target.result;
                    //alert(mapImage)

                    //$("#MyImage").css("display", "block");
                    //$("#MyImage").attr('src', mapImage);

                };

                fileReader.readAsDataURL(e.files[0].rawFile);
            }
        });

    };

    function onSuccess(e) {
        // An array with information about the uploaded files
        var files = e.files;

        if (e.operation == "upload") {


            OpenCropImage(@Model.Id);
        }
    }

</script>*@


@using (Html.BeginForm("Manage", "Movie", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.Title, new { @class = "control-label" })
        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Genre, new { @class = "control-label" })
        @Html.EditorFor(model => model.Genre, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ReleaseDate, new { @class = "control-label" })

        <div class="input-group">
            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
            @Html.TextBoxFor(model => model.ReleaseDate, "{0:yyyy-MM-dd}", new { @type = "date", @class = "form-control" })
        </div>

        @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Rating, new { @class = "control-label" })
        @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, new { @class = "control-label" })
        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SelectedLanguageId, "Language", htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.SelectedLanguageId, Model.Languages as SelectList, "-- Select Language --", htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.SelectedLanguageId, "", new { @class = "text-danger" })
    </div>

    @*<div id="kendoImgUpload">
        @(Html.Kendo().Upload()
         .Name("uploadMovieImg")
         .Multiple(false)
         .Async(a => a
        .Save("SaveImg", "Movie")
        .Remove("RemoveImg", "Movie")
    )
        .Events(x => x.Select("File_onFileSelect"))
                    //.Events(x => x.Remove("File_onRemove"))
                    .Messages(x => x.Select("Browse"))
                    .Events(x => x.Success("onSuccess"))
         .Validation(validation => validation
            .AllowedExtensions(new string[] { ".jpg", ".png", ".jpeg" })
            .MaxFileSize(31457280)
            .MinFileSize(30720)
        )
    )
    </div>*@



    <div class="form-group">

        @*<button type="submit" value="@(Model.Id == 0 ? "Create" : "Save Changes")" class="btn btn-primary" />*@
        <button type="submit" class="btn btn-primary">
            @(Model.Id == 0 ? "Create" : "Save Changes")
        </button>

        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default" })

        <span id="errorMsgSpan">@ViewBag.msg</span>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

